#!/usr/bin/env node

var path = require('path');
var cp = require('child_process');

function printErr(str) {
    console.error('\033[31m' + str + '\033[0m');
}

if (process.platform !== 'win32' && process.arch === 'ia32') {
    console.error('Building on ia32 linux and darwin is not supported.');
    process.exit(1);
}

var arch = process.argv.length == 3 && process.argv[2].indexOf('--arch=') === 0 ? 
            process.argv[2].substring('--arch='.length) : 'x64';

if (arch !== 'x64' && arch !== 'ia32') {
    printErr('Invalid architecture specified. Allowed architectures: x64 and ia32');
    process.exit(1);
}

process.chdir(path.dirname(__dirname));

var env = process.env;
env.npm_config_disturl = 'https://atom.io/download/electron';
env.npm_config_target = '1.4.15';
env.npm_config_arch = arch;
env.npm_config_target_arch = arch;

try {
    cp.execSync('npm install --msvs_version=2013', 
                {
                    env: env,
                    stdio: ['inherit', 'inherit', 'inherit']
                });
} catch (e) {
    printErr(e);
    return;
}

var gruntPath = path.join('node_modules', '.bin', 'grunt') + (process.platform === 'win32' ? '.cmd' : '');
var args = process.argv.slice(2);
var child = cp.exec(gruntPath + ' --gruntfile="' + path.resolve('Gruntfile.js') + '" ' + args.join(' '),
                    { maxBuffer: 10 * 1024 * 1024 },
                    function(error, stdout, stderr) {
                        if (error) {
                            process.exit(error.code || 1);
                        }
                    });
child.stderr.pipe(process.stderr);
child.stdout.pipe(process.stdout);
