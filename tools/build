#!/usr/bin/env node

const ELECTRON_VER = '1.4.15';

var path = require('path');
var cp = require('child_process');

function printErr(str) {
    console.error('\033[31m' + str + '\033[0m');
}

if (process.platform !== 'win32' && process.arch === 'ia32') {
    console.error('Building on ia32 linux and darwin is not supported.');
    process.exit(1);
}

var arch = process.argv.length == 3 && process.argv[2].indexOf('--arch=') === 0 ? 
            process.argv[2].substring('--arch='.length) : 'x64';

if (arch !== 'x64' && arch !== 'ia32') {
    printErr('Invalid architecture specified. Allowed architectures: x64 and ia32');
    process.exit(1);
}

process.chdir(path.dirname(__dirname));

try {
    cp.execSync('npm install --msvs_version=2013', 
                {
                    env: process.env,
                    stdio: ['inherit', 'inherit', 'inherit'],
                    maxBuffer: 10 * 1024 * 1024
                });
    cp.execFileSync(path.join(__dirname, '..', 'node_modules', '.bin', 'electron-rebuild' + (process.platform === 'win32' ? '.cmd' : '')),
                ['-v', ELECTRON_VER, '-t', 'prod'], 
                {
                    env: process.env,
                    stdio: ['inherit', 'inherit', 'inherit'],
                    maxBuffer: 10 * 1024 * 1024
                });
    cp.execSync('grunt ' + process.argv.slice(2).join(' '),
                {
                    env: process.env,
                    stdio: ['inherit', 'inherit', 'inherit'],
                    maxBuffer: 10 * 1024 * 1024
                });   
} catch (e) {
    printErr(e);
    return;
}
